"""
    Este programa minimiza a dist√¢ncia m√©dia entre alunos e escolas levando-se em considera√ß√£o a
    localiza√ß√£o de ambos e a quantidade de vagas dispon√≠veis.

    O programa √© organizado em m√≥dulos, a saber:

    - main.py:
    Ponto de entrada do programa. Importa fun√ß√µes necess√°rias de outros arquivos.

    - utils.py:
    Armazena fun√ß√µes auxiliares usadas em v√°rias partes do seu programa.
    Contem fun√ß√µes como get_data() (obter dados), clean_data() (limpar dados) e outras fun√ß√µes
    utilit√°rias n√£o seja espec√≠ficas de um m√≥dulo em particular.

    - data_processing.py:
    Armazena as fun√ß√µes relacionadas ao processamento de dados.
    Contem fun√ß√µes como preprocess_data(), analyze_data() e outras fun√ß√µes de manipula√ß√£o ou
    an√°lise de dados.

    - model.py:
    Armazena as fun√ß√µes relacionadas a aprendizado de m√°quina.
    Contem fun√ß√£es como model_data() (treinar modelo) e outras fun√ß√µes para treinamento, avalia√ß√£o
    ou qualquer outra opera√ß√£o espec√≠fica em modelos.

    - visualization.py:
    Armazena fun√ß√µes relacionadas √† visualiza√ß√£o de dados ou plotagem.
    Contem fun√ß√µes para criar v√°rios gr√°ficos, diagramas ou representa√ß√µes visuais de dados.

    - streamlit_app.py:
    Armazena as fun√ß√£es relacionadas √† interface do usu√°rio.
    Neste arquivo, est√° a defini√ß√£o do c√≥digo da aplica√ß√£o Streamlit.
    Contem c√≥digo de defini√ß√£o do layout, componentes de interface do usu√°rio e intera√ß√µes.
    """

# https://towardsdatascience.com/understanding-python-imports-init-py-and-pythonpath-once-and-for-all-4c5249ab6355

import streamlit as st
from streamlit_lottie import st_lottie
# from streamlit_lottie import st_lottie_spinner

import os
import sys
import page
import requests
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

MAIN_PATH = os.path.normpath(__file__)
sys.path.append(os.path.dirname(MAIN_PATH))

@st.cache_data()
def load_lottieurl(url: str):
    r = requests.get(url,timeout=30)
    if r.status_code != 200:
        return None
    return r.json()
# https://lottiefiles.com/mograph
lootie_list = ['https://assets1.lottiefiles.com/packages/lf20_nonpuabv.json',
               'https://assets8.lottiefiles.com/packages/lf20_awP420Zf8l.json',
               'https://assets8.lottiefiles.com/private_files/lf30_TBKozE.json',
               'https://assets2.lottiefiles.com/packages/lf20_x0ysvaqt.json',
               'https://assets10.lottiefiles.com/datafiles/MaKSoctsyXXTCDOpDktJYEcS3ws5SI6CLDo7iyMc/ex-splash.json',
               'https://assets9.lottiefiles.com/packages/lf20_D8Mw4zIZPL.json',]


lootie = load_lottieurl(lootie_list[4])
st_lottie(lootie, key='intro')
st.markdown("# Otimiza√ß√£o da aloca√ß√£o estudantil")
st.markdown("Modelo para otimiza√ß√£o de aloca√ß√£o de alunos em escolas com base \
                na minimiza√ß√£o da dist√¢ncia m√©dia entre aluno e escola.")


tabs = st.tabs(["üéØObjetivo", "üé®Gerador de Dados", "üåçResultado"])

with tabs[0]:
    page.intro.show()

with tabs[1]:
    page.generator.show()

with tabs[2]:
    page.model.show()